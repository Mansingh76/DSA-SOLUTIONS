

public class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        // Step 1: Frequency map
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Buckets where index = frequency
        List<List<Integer>> buckets = new ArrayList<>();
        for (int i = 0; i <= nums.length; i++) {
            buckets.add(new ArrayList<>());
        }

        for (int num : frequencyMap.keySet()) {
            int freq = frequencyMap.get(num);
            buckets.get(freq).add(num);
        }

        // Step 3: Gather results from highest frequency to lowest
        List<Integer> result = new ArrayList<>();
        for (int i = buckets.size() - 1; i >= 0 && result.size() < k; i--) {
            if (!buckets.get(i).isEmpty()) {
                result.addAll(buckets.get(i));
            }
        }

        // Step 4: Convert to array, limit to k
        return result.stream().limit(k).mapToInt(Integer::intValue).toArray();
    }


