210. Course Schedule II (Find Order)

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) graph.add(new ArrayList<>());
        int[] indegree = new int[numCourses];

        for (int[] pre : prerequisites) {
            graph.get(pre[1]).add(pre[0]);
            indegree[pre[0]]++;
        }

        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) q.add(i);
        }

        int[] res = new int[numCourses];
        int idx = 0;

        while (!q.isEmpty()) {
            int course = q.poll();
            res[idx++] = course;
            for (int nei : graph.get(course)) {
                indegree[nei]--;
                if (indegree[nei] == 0) q.add(nei);
            }
        }
        return idx == numCourses ? res : new int[0];
    }
}

