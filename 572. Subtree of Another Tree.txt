572. Subtree of Another Tree


class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
         if (root == null) {
            return false;
        }
        
        // Check if trees are identical starting from current root
        if (isSameTree(root, subRoot)) {
            return true;
        }
        
        // Recursively check left and right subtrees
        return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
    }
    
    /**
     * Helper function to check if two trees are identical
     */
    private boolean isSameTree(TreeNode p, TreeNode q) {
        // Both are null - identical
        if (p == null && q == null) {
            return true;
        }
        
        // One is null, other is not - not identical
        if (p == null || q == null) {
            return false;
        }
        
        // Values must match and both subtrees must be identical
        return p.val == q.val && 
               isSameTree(p.left, q.left) && 
               isSameTree(p.right, q.right);
    }
    }

