105. Construct Binary Tree from Preorder & Inorder Traversal


class Solution {
      private Map<Integer, Integer> inorderMap;
    private int preorderIndex = 0;
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // Build hashmap for O(1) inorder index lookup
        inorderMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }
        
        preorderIndex = 0;
        return build(preorder, 0, inorder.length - 1);
    }
    
    private TreeNode build(int[] preorder, int left, int right) {
        if (left > right) return null;
        
        // First element in preorder is always root
        int rootVal = preorder[preorderIndex++];
        TreeNode root = new TreeNode(rootVal);
        
        // Find root position in inorder
        int mid = inorderMap.get(rootVal);
        
        // Build left subtree first (preorder: root, left, right)
        root.left = build(preorder, left, mid - 1);
        root.right = build(preorder, mid + 1, right);
        
        return root;
        
    }
}
