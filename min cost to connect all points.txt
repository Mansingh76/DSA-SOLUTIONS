class Solution {
    public int minCostConnectPoints(int[][] points) {
        int n = points.length;
        boolean[] visited = new boolean[n];
        int edgesUsed = 0;
        int cost = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.offer(new int[]{0, 0}); // cost, pointIndex

        while (edgesUsed < n) {
            int[] cur = pq.poll();
            int w = cur[0], idx = cur[1];
            if (visited[idx]) continue;
            visited[idx] = true;
            cost += w;
            edgesUsed++;

            for (int next = 0; next < n; next++) {
                if (!visited[next]) {
                    int dist = Math.abs(points[idx][0] - points[next][0]) + 
                               Math.abs(points[idx][1] - points[next][1]);
                    pq.offer(new int[]{dist, next});
                }
            }
        }
        return cost;
    }
}
